// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// SetSampleIdx_forGenetest_vcfDosage
void SetSampleIdx_forGenetest_vcfDosage(std::vector<int> sample_idx, int Ntest);
RcppExport SEXP _SAIGE_SetSampleIdx_forGenetest_vcfDosage(SEXP sample_idxSEXP, SEXP NtestSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int> >::type sample_idx(sample_idxSEXP);
    Rcpp::traits::input_parameter< int >::type Ntest(NtestSEXP);
    SetSampleIdx_forGenetest_vcfDosage(sample_idx, Ntest);
    return R_NilValue;
END_RCPP
}
// setMAFcutoffs
void setMAFcutoffs(float minVal, float maxVal);
RcppExport SEXP _SAIGE_setMAFcutoffs(SEXP minValSEXP, SEXP maxValSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type minVal(minValSEXP);
    Rcpp::traits::input_parameter< float >::type maxVal(maxValSEXP);
    setMAFcutoffs(minVal, maxVal);
    return R_NilValue;
END_RCPP
}
// setvcfDosageMatrix
bool setvcfDosageMatrix(const std::string& vcfFileName, const std::string& vcfFileIndex, const std::string& vcfField);
RcppExport SEXP _SAIGE_setvcfDosageMatrix(SEXP vcfFileNameSEXP, SEXP vcfFileIndexSEXP, SEXP vcfFieldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type vcfFileName(vcfFileNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type vcfFileIndex(vcfFileIndexSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type vcfField(vcfFieldSEXP);
    rcpp_result_gen = Rcpp::wrap(setvcfDosageMatrix(vcfFileName, vcfFileIndex, vcfField));
    return rcpp_result_gen;
END_RCPP
}
// getNumofSamples_Matrix
int getNumofSamples_Matrix();
RcppExport SEXP _SAIGE_getNumofSamples_Matrix() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNumofSamples_Matrix());
    return rcpp_result_gen;
END_RCPP
}
// getSampleIDlist_vcfMatrix
std::vector< std::string > getSampleIDlist_vcfMatrix();
RcppExport SEXP _SAIGE_getSampleIDlist_vcfMatrix() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSampleIDlist_vcfMatrix());
    return rcpp_result_gen;
END_RCPP
}
// getGenoOfGene_vcf
Rcpp::List getGenoOfGene_vcf(std::string marker_group_line, float minInfo);
RcppExport SEXP _SAIGE_getGenoOfGene_vcf(SEXP marker_group_lineSEXP, SEXP minInfoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type marker_group_line(marker_group_lineSEXP);
    Rcpp::traits::input_parameter< float >::type minInfo(minInfoSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenoOfGene_vcf(marker_group_line, minInfo));
    return rcpp_result_gen;
END_RCPP
}
// closevcfDosageFile
void closevcfDosageFile();
RcppExport SEXP _SAIGE_closevcfDosageFile() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closevcfDosageFile();
    return R_NilValue;
END_RCPP
}
// closeGenoFile_plink
void closeGenoFile_plink();
RcppExport SEXP _SAIGE_closeGenoFile_plink() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closeGenoFile_plink();
    return R_NilValue;
END_RCPP
}
// gettotalMarker
int gettotalMarker();
RcppExport SEXP _SAIGE_gettotalMarker() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gettotalMarker());
    return rcpp_result_gen;
END_RCPP
}
// getAlleleFreqVec
arma::fvec getAlleleFreqVec();
RcppExport SEXP _SAIGE_getAlleleFreqVec() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getAlleleFreqVec());
    return rcpp_result_gen;
END_RCPP
}
// getMACVec
arma::ivec getMACVec();
RcppExport SEXP _SAIGE_getMACVec() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMACVec());
    return rcpp_result_gen;
END_RCPP
}
// getSubMarkerIndex
arma::ivec getSubMarkerIndex();
RcppExport SEXP _SAIGE_getSubMarkerIndex() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSubMarkerIndex());
    return rcpp_result_gen;
END_RCPP
}
// getSubMarkerNum
int getSubMarkerNum();
RcppExport SEXP _SAIGE_getSubMarkerNum() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSubMarkerNum());
    return rcpp_result_gen;
END_RCPP
}
// getNnomissingOut
int getNnomissingOut();
RcppExport SEXP _SAIGE_getNnomissingOut() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNnomissingOut());
    return rcpp_result_gen;
END_RCPP
}
// getMsub_MAFge_minMAFtoConstructGRM
int getMsub_MAFge_minMAFtoConstructGRM();
RcppExport SEXP _SAIGE_getMsub_MAFge_minMAFtoConstructGRM() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMsub_MAFge_minMAFtoConstructGRM());
    return rcpp_result_gen;
END_RCPP
}
// Get_MultiMarkersBySample_StdGeno_Mat
void Get_MultiMarkersBySample_StdGeno_Mat();
RcppExport SEXP _SAIGE_Get_MultiMarkersBySample_StdGeno_Mat() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Get_MultiMarkersBySample_StdGeno_Mat();
    return R_NilValue;
END_RCPP
}
// Get_MultiMarkersBySample_StdGeno
void Get_MultiMarkersBySample_StdGeno(arma::fvec& markerIndexVec, std::vector<float>& stdGenoMultiMarkers);
RcppExport SEXP _SAIGE_Get_MultiMarkersBySample_StdGeno(SEXP markerIndexVecSEXP, SEXP stdGenoMultiMarkersSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type markerIndexVec(markerIndexVecSEXP);
    Rcpp::traits::input_parameter< std::vector<float>& >::type stdGenoMultiMarkers(stdGenoMultiMarkersSEXP);
    Get_MultiMarkersBySample_StdGeno(markerIndexVec, stdGenoMultiMarkers);
    return R_NilValue;
END_RCPP
}
// parallelCrossProd
arma::fvec parallelCrossProd(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_parallelCrossProd(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd(bVec));
    return rcpp_result_gen;
END_RCPP
}
// innerProductFun
float innerProductFun(std::vector<float>& x, std::vector<float>& y);
RcppExport SEXP _SAIGE_innerProductFun(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<float>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(innerProductFun(x, y));
    return rcpp_result_gen;
END_RCPP
}
// parallelCrossProd_LOCO
arma::fvec parallelCrossProd_LOCO(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_parallelCrossProd_LOCO(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd_LOCO(bVec));
    return rcpp_result_gen;
END_RCPP
}
// setupSparseGRM
void setupSparseGRM(int r, arma::umat& locationMatinR, arma::vec& valueVecinR);
RcppExport SEXP _SAIGE_setupSparseGRM(SEXP rSEXP, SEXP locationMatinRSEXP, SEXP valueVecinRSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type locationMatinR(locationMatinRSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type valueVecinR(valueVecinRSEXP);
    setupSparseGRM(r, locationMatinR, valueVecinR);
    return R_NilValue;
END_RCPP
}
// getCrossprodMatAndKin
arma::fvec getCrossprodMatAndKin(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_getCrossprodMatAndKin(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprodMatAndKin(bVec));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprodMatAndKin_LOCO
arma::fvec getCrossprodMatAndKin_LOCO(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_getCrossprodMatAndKin_LOCO(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprodMatAndKin_LOCO(bVec));
    return rcpp_result_gen;
END_RCPP
}
// printComb
void printComb(int N);
RcppExport SEXP _SAIGE_printComb(SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    printComb(N);
    return R_NilValue;
END_RCPP
}
// findIndiceRelatedSample
void findIndiceRelatedSample();
RcppExport SEXP _SAIGE_findIndiceRelatedSample() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    findIndiceRelatedSample();
    return R_NilValue;
END_RCPP
}
// parallelcalsparseGRM
void parallelcalsparseGRM(arma::fvec& GRMvec);
RcppExport SEXP _SAIGE_parallelcalsparseGRM(SEXP GRMvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type GRMvec(GRMvecSEXP);
    parallelcalsparseGRM(GRMvec);
    return R_NilValue;
END_RCPP
}
// parallelsumTwoVec
void parallelsumTwoVec(arma::fvec& x);
RcppExport SEXP _SAIGE_parallelsumTwoVec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type x(xSEXP);
    parallelsumTwoVec(x);
    return R_NilValue;
END_RCPP
}
// setgeno
void setgeno(std::string genofile, std::vector<int>& subSampleInGeno, float memoryChunk, bool isDiagofKinSetAsOne);
RcppExport SEXP _SAIGE_setgeno(SEXP genofileSEXP, SEXP subSampleInGenoSEXP, SEXP memoryChunkSEXP, SEXP isDiagofKinSetAsOneSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type genofile(genofileSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type subSampleInGeno(subSampleInGenoSEXP);
    Rcpp::traits::input_parameter< float >::type memoryChunk(memoryChunkSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiagofKinSetAsOne(isDiagofKinSetAsOneSEXP);
    setgeno(genofile, subSampleInGeno, memoryChunk, isDiagofKinSetAsOne);
    return R_NilValue;
END_RCPP
}
// Get_OneSNP_Geno
arma::ivec Get_OneSNP_Geno(int SNPIdx);
RcppExport SEXP _SAIGE_Get_OneSNP_Geno(SEXP SNPIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type SNPIdx(SNPIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_OneSNP_Geno(SNPIdx));
    return rcpp_result_gen;
END_RCPP
}
// Get_OneSNP_Geno_forVarianceRatio
arma::ivec Get_OneSNP_Geno_forVarianceRatio(int SNPIdx);
RcppExport SEXP _SAIGE_Get_OneSNP_Geno_forVarianceRatio(SEXP SNPIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type SNPIdx(SNPIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_OneSNP_Geno_forVarianceRatio(SNPIdx));
    return rcpp_result_gen;
END_RCPP
}
// Get_OneSNP_StdGeno
arma::fvec Get_OneSNP_StdGeno(int SNPIdx);
RcppExport SEXP _SAIGE_Get_OneSNP_StdGeno(SEXP SNPIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type SNPIdx(SNPIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_OneSNP_StdGeno(SNPIdx));
    return rcpp_result_gen;
END_RCPP
}
// getDiagOfSigma
arma::fvec getDiagOfSigma(arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_getDiagOfSigma(SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getDiagOfSigma(wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// getDiagOfSigma_LOCO
arma::fvec getDiagOfSigma_LOCO(arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_getDiagOfSigma_LOCO(SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getDiagOfSigma_LOCO(wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprod
arma::fcolvec getCrossprod(arma::fcolvec& bVec, arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_getCrossprod(SEXP bVecSEXP, SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprod(bVec, wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprod_LOCO
arma::fcolvec getCrossprod_LOCO(arma::fcolvec& bVec, arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_getCrossprod_LOCO(SEXP bVecSEXP, SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprod_LOCO(bVec, wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// gen_sp_GRM
arma::sp_mat gen_sp_GRM();
RcppExport SEXP _SAIGE_gen_sp_GRM() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gen_sp_GRM());
    return rcpp_result_gen;
END_RCPP
}
// gen_sp_Sigma
arma::sp_mat gen_sp_Sigma(arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_gen_sp_Sigma(SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sp_Sigma(wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// gen_spsolve_v3
arma::vec gen_spsolve_v3(arma::vec& yvec);
RcppExport SEXP _SAIGE_gen_spsolve_v3(SEXP yvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type yvec(yvecSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_spsolve_v3(yvec));
    return rcpp_result_gen;
END_RCPP
}
// gen_spsolve_v4
arma::fvec gen_spsolve_v4(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& yvec);
RcppExport SEXP _SAIGE_gen_spsolve_v4(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP yvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type yvec(yvecSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_spsolve_v4(wVec, tauVec, yvec));
    return rcpp_result_gen;
END_RCPP
}
// setisUsePrecondM
void setisUsePrecondM(bool isUseSparseSigmaforPCG);
RcppExport SEXP _SAIGE_setisUsePrecondM(SEXP isUseSparseSigmaforPCGSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isUseSparseSigmaforPCG(isUseSparseSigmaforPCGSEXP);
    setisUsePrecondM(isUseSparseSigmaforPCG);
    return R_NilValue;
END_RCPP
}
// setisUseSparseSigmaforInitTau
void setisUseSparseSigmaforInitTau(bool isUseSparseSigmaforInitTau0);
RcppExport SEXP _SAIGE_setisUseSparseSigmaforInitTau(SEXP isUseSparseSigmaforInitTau0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isUseSparseSigmaforInitTau0(isUseSparseSigmaforInitTau0SEXP);
    setisUseSparseSigmaforInitTau(isUseSparseSigmaforInitTau0);
    return R_NilValue;
END_RCPP
}
// setisUseSparseSigmaforNullModelFitting
void setisUseSparseSigmaforNullModelFitting(bool isUseSparseSigmaforModelFitting0);
RcppExport SEXP _SAIGE_setisUseSparseSigmaforNullModelFitting(SEXP isUseSparseSigmaforModelFitting0SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isUseSparseSigmaforModelFitting0(isUseSparseSigmaforModelFitting0SEXP);
    setisUseSparseSigmaforNullModelFitting(isUseSparseSigmaforModelFitting0);
    return R_NilValue;
END_RCPP
}
// getPCG1ofSigmaAndVector
arma::fvec getPCG1ofSigmaAndVector(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& bVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getPCG1ofSigmaAndVector(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP bVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getPCG1ofSigmaAndVector(wVec, tauVec, bVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getPCG1ofSigmaAndVector_old
arma::fvec getPCG1ofSigmaAndVector_old(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& bVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getPCG1ofSigmaAndVector_old(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP bVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getPCG1ofSigmaAndVector_old(wVec, tauVec, bVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getPCG1ofSigmaAndVector_LOCO
arma::fvec getPCG1ofSigmaAndVector_LOCO(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& bVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getPCG1ofSigmaAndVector_LOCO(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP bVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bVec(bVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getPCG1ofSigmaAndVector_LOCO(wVec, tauVec, bVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _SAIGE_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// nb
Rcpp::NumericVector nb(int n);
RcppExport SEXP _SAIGE_nb(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(nb(n));
    return rcpp_result_gen;
END_RCPP
}
// setStartEndIndex
void setStartEndIndex(int startIndex, int endIndex);
RcppExport SEXP _SAIGE_setStartEndIndex(SEXP startIndexSEXP, SEXP endIndexSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type startIndex(startIndexSEXP);
    Rcpp::traits::input_parameter< int >::type endIndex(endIndexSEXP);
    setStartEndIndex(startIndex, endIndex);
    return R_NilValue;
END_RCPP
}
// calCV
float calCV(arma::fvec& xVec);
RcppExport SEXP _SAIGE_calCV(SEXP xVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type xVec(xVecSEXP);
    rcpp_result_gen = Rcpp::wrap(calCV(xVec));
    return rcpp_result_gen;
END_RCPP
}
// GetTrace
float GetTrace(arma::fmat Sigma_iX, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::fmat& cov1, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff);
RcppExport SEXP _SAIGE_GetTrace(SEXP Sigma_iXSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP cov1SEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fmat >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov1(cov1SEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTrace(Sigma_iX, Xmat, wVec, tauVec, cov1, nrun, maxiterPCG, tolPCG, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// getCoefficients
Rcpp::List getCoefficients(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getCoefficients(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getCoefficients(Yvec, Xmat, wVec, tauVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getCoefficients_LOCO
Rcpp::List getCoefficients_LOCO(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getCoefficients_LOCO(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getCoefficients_LOCO(Yvec, Xmat, wVec, tauVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getCoefficients_q_LOCO
Rcpp::List getCoefficients_q_LOCO(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getCoefficients_q_LOCO(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getCoefficients_q_LOCO(Yvec, Xmat, wVec, tauVec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getAIScore
Rcpp::List getAIScore(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Sigma_iY, arma::fmat& Sigma_iX, arma::fmat& cov, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff);
RcppExport SEXP _SAIGE_getAIScore(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP Sigma_iYSEXP, SEXP Sigma_iXSEXP, SEXP covSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Sigma_iY(Sigma_iYSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(getAIScore(Yvec, Xmat, wVec, tauVec, Sigma_iY, Sigma_iX, cov, nrun, maxiterPCG, tolPCG, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// fitglmmaiRPCG
Rcpp::List fitglmmaiRPCG(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Sigma_iY, arma::fmat& Sigma_iX, arma::fmat& cov, int nrun, int maxiterPCG, float tolPCG, float tol, float traceCVcutoff);
RcppExport SEXP _SAIGE_fitglmmaiRPCG(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP Sigma_iYSEXP, SEXP Sigma_iXSEXP, SEXP covSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP tolSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Sigma_iY(Sigma_iYSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fitglmmaiRPCG(Yvec, Xmat, wVec, tauVec, Sigma_iY, Sigma_iX, cov, nrun, maxiterPCG, tolPCG, tol, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_X
arma::fmat getSigma_X(arma::fvec& wVec, arma::fvec& tauVec, arma::fmat& Xmat, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getSigma_X(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP XmatSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_X(wVec, tauVec, Xmat, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_X_LOCO
arma::fmat getSigma_X_LOCO(arma::fvec& wVec, arma::fvec& tauVec, arma::fmat& Xmat, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getSigma_X_LOCO(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP XmatSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_X_LOCO(wVec, tauVec, Xmat, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_G
arma::fvec getSigma_G(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Gvec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getSigma_G(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP GvecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_G(wVec, tauVec, Gvec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// getSigma_G_LOCO
arma::fvec getSigma_G_LOCO(arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Gvec, int maxiterPCG, float tolPCG);
RcppExport SEXP _SAIGE_getSigma_G_LOCO(SEXP wVecSEXP, SEXP tauVecSEXP, SEXP GvecSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Gvec(GvecSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    rcpp_result_gen = Rcpp::wrap(getSigma_G_LOCO(wVec, tauVec, Gvec, maxiterPCG, tolPCG));
    return rcpp_result_gen;
END_RCPP
}
// GetTrace_q
arma::fvec GetTrace_q(arma::fmat Sigma_iX, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::fmat& cov1, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff);
RcppExport SEXP _SAIGE_GetTrace_q(SEXP Sigma_iXSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP cov1SEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fmat >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov1(cov1SEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(GetTrace_q(Sigma_iX, Xmat, wVec, tauVec, cov1, nrun, maxiterPCG, tolPCG, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// getAIScore_q
Rcpp::List getAIScore_q(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Sigma_iY, arma::fmat& Sigma_iX, arma::fmat& cov, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff);
RcppExport SEXP _SAIGE_getAIScore_q(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP Sigma_iYSEXP, SEXP Sigma_iXSEXP, SEXP covSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Sigma_iY(Sigma_iYSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(getAIScore_q(Yvec, Xmat, wVec, tauVec, Sigma_iY, Sigma_iX, cov, nrun, maxiterPCG, tolPCG, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// getAIScore_q_LOCO
Rcpp::List getAIScore_q_LOCO(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, int nrun, int maxiterPCG, float tolPCG, float traceCVcutoff);
RcppExport SEXP _SAIGE_getAIScore_q_LOCO(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(getAIScore_q_LOCO(Yvec, Xmat, wVec, tauVec, nrun, maxiterPCG, tolPCG, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// fitglmmaiRPCG_q_LOCO
Rcpp::List fitglmmaiRPCG_q_LOCO(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, int nrun, int maxiterPCG, float tolPCG, float tol, float traceCVcutoff);
RcppExport SEXP _SAIGE_fitglmmaiRPCG_q_LOCO(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP tolSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fitglmmaiRPCG_q_LOCO(Yvec, Xmat, wVec, tauVec, nrun, maxiterPCG, tolPCG, tol, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// fitglmmaiRPCG_q
Rcpp::List fitglmmaiRPCG_q(arma::fvec& Yvec, arma::fmat& Xmat, arma::fvec& wVec, arma::fvec& tauVec, arma::fvec& Sigma_iY, arma::fmat& Sigma_iX, arma::fmat& cov, int nrun, int maxiterPCG, float tolPCG, float tol, float traceCVcutoff);
RcppExport SEXP _SAIGE_fitglmmaiRPCG_q(SEXP YvecSEXP, SEXP XmatSEXP, SEXP wVecSEXP, SEXP tauVecSEXP, SEXP Sigma_iYSEXP, SEXP Sigma_iXSEXP, SEXP covSEXP, SEXP nrunSEXP, SEXP maxiterPCGSEXP, SEXP tolPCGSEXP, SEXP tolSEXP, SEXP traceCVcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Yvec(YvecSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Xmat(XmatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Sigma_iY(Sigma_iYSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type Sigma_iX(Sigma_iXSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type cov(covSEXP);
    Rcpp::traits::input_parameter< int >::type nrun(nrunSEXP);
    Rcpp::traits::input_parameter< int >::type maxiterPCG(maxiterPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tolPCG(tolPCGSEXP);
    Rcpp::traits::input_parameter< float >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< float >::type traceCVcutoff(traceCVcutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(fitglmmaiRPCG_q(Yvec, Xmat, wVec, tauVec, Sigma_iY, Sigma_iX, cov, nrun, maxiterPCG, tolPCG, tol, traceCVcutoff));
    return rcpp_result_gen;
END_RCPP
}
// parallelCrossProd_usingSubMarker
arma::fvec parallelCrossProd_usingSubMarker(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_parallelCrossProd_usingSubMarker(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(parallelCrossProd_usingSubMarker(bVec));
    return rcpp_result_gen;
END_RCPP
}
// getCrossprodMatAndKin_usingSubMarker
arma::fvec getCrossprodMatAndKin_usingSubMarker(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_getCrossprodMatAndKin_usingSubMarker(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprodMatAndKin_usingSubMarker(bVec));
    return rcpp_result_gen;
END_RCPP
}
// parallelInnerProduct
float parallelInnerProduct(std::vector<float>& x, std::vector<float>& y);
RcppExport SEXP _SAIGE_parallelInnerProduct(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<float>& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<float>& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(parallelInnerProduct(x, y));
    return rcpp_result_gen;
END_RCPP
}
// calGRMValueforSamplePair
float calGRMValueforSamplePair(arma::ivec& sampleidsVec);
RcppExport SEXP _SAIGE_calGRMValueforSamplePair(SEXP sampleidsVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type sampleidsVec(sampleidsVecSEXP);
    rcpp_result_gen = Rcpp::wrap(calGRMValueforSamplePair(sampleidsVec));
    return rcpp_result_gen;
END_RCPP
}
// createSparseKin
Rcpp::List createSparseKin(arma::fvec& markerIndexVec, float relatednessCutoff, arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_createSparseKin(SEXP markerIndexVecSEXP, SEXP relatednessCutoffSEXP, SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type markerIndexVec(markerIndexVecSEXP);
    Rcpp::traits::input_parameter< float >::type relatednessCutoff(relatednessCutoffSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(createSparseKin(markerIndexVec, relatednessCutoff, wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// getColfromStdGenoMultiMarkersMat
arma::fmat getColfromStdGenoMultiMarkersMat(arma::uvec& a);
RcppExport SEXP _SAIGE_getColfromStdGenoMultiMarkersMat(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(getColfromStdGenoMultiMarkersMat(a));
    return rcpp_result_gen;
END_RCPP
}
// getNColStdGenoMultiMarkersMat
int getNColStdGenoMultiMarkersMat();
RcppExport SEXP _SAIGE_getNColStdGenoMultiMarkersMat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNColStdGenoMultiMarkersMat());
    return rcpp_result_gen;
END_RCPP
}
// getNRowStdGenoMultiMarkersMat
int getNRowStdGenoMultiMarkersMat();
RcppExport SEXP _SAIGE_getNRowStdGenoMultiMarkersMat() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNRowStdGenoMultiMarkersMat());
    return rcpp_result_gen;
END_RCPP
}
// setSubMarkerIndex
void setSubMarkerIndex(arma::ivec& subMarkerIndexRandom);
RcppExport SEXP _SAIGE_setSubMarkerIndex(SEXP subMarkerIndexRandomSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::ivec& >::type subMarkerIndexRandom(subMarkerIndexRandomSEXP);
    setSubMarkerIndex(subMarkerIndexRandom);
    return R_NilValue;
END_RCPP
}
// setRelatednessCutoff
void setRelatednessCutoff(float a);
RcppExport SEXP _SAIGE_setRelatednessCutoff(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type a(aSEXP);
    setRelatednessCutoff(a);
    return R_NilValue;
END_RCPP
}
// innerProduct
double innerProduct(NumericVector x, NumericVector y);
RcppExport SEXP _SAIGE_innerProduct(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(innerProduct(x, y));
    return rcpp_result_gen;
END_RCPP
}
// refineKin
Rcpp::List refineKin(float relatednessCutoff);
RcppExport SEXP _SAIGE_refineKin(SEXP relatednessCutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type relatednessCutoff(relatednessCutoffSEXP);
    rcpp_result_gen = Rcpp::wrap(refineKin(relatednessCutoff));
    return rcpp_result_gen;
END_RCPP
}
// shortenList
Rcpp::List shortenList(arma::imat& iMat, arma::fvec& kinValueVecTemp, float relatednessCutoff, arma::fvec& wVec, arma::fvec& tauVec);
RcppExport SEXP _SAIGE_shortenList(SEXP iMatSEXP, SEXP kinValueVecTempSEXP, SEXP relatednessCutoffSEXP, SEXP wVecSEXP, SEXP tauVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::imat& >::type iMat(iMatSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type kinValueVecTemp(kinValueVecTempSEXP);
    Rcpp::traits::input_parameter< float >::type relatednessCutoff(relatednessCutoffSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type wVec(wVecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tauVec(tauVecSEXP);
    rcpp_result_gen = Rcpp::wrap(shortenList(iMat, kinValueVecTemp, relatednessCutoff, wVec, tauVec));
    return rcpp_result_gen;
END_RCPP
}
// testTime
arma::fvec testTime(int i, arma::fcolvec& m_bVec);
RcppExport SEXP _SAIGE_testTime(SEXP iSEXP, SEXP m_bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::fcolvec& >::type m_bVec(m_bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(testTime(i, m_bVec));
    return rcpp_result_gen;
END_RCPP
}
// gen_sp_v2
arma::sp_mat gen_sp_v2(const arma::sp_mat& a);
RcppExport SEXP _SAIGE_gen_sp_v2(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sp_v2(a));
    return rcpp_result_gen;
END_RCPP
}
// gen_spsolve_v2
arma::vec gen_spsolve_v2(const arma::sp_mat& a);
RcppExport SEXP _SAIGE_gen_spsolve_v2(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_spsolve_v2(a));
    return rcpp_result_gen;
END_RCPP
}
// gen_spsolve_inR
arma::vec gen_spsolve_inR(const arma::sp_mat& a, arma::vec& y);
RcppExport SEXP _SAIGE_gen_spsolve_inR(SEXP aSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(gen_spsolve_inR(a, y));
    return rcpp_result_gen;
END_RCPP
}
// get_DiagofKin
arma::fvec get_DiagofKin();
RcppExport SEXP _SAIGE_get_DiagofKin() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_DiagofKin());
    return rcpp_result_gen;
END_RCPP
}
// getstdgenoVectorScalorProduct
void getstdgenoVectorScalorProduct(int jth, float y, arma::fvec& prodVec);
RcppExport SEXP _SAIGE_getstdgenoVectorScalorProduct(SEXP jthSEXP, SEXP ySEXP, SEXP prodVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type jth(jthSEXP);
    Rcpp::traits::input_parameter< float >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type prodVec(prodVecSEXP);
    getstdgenoVectorScalorProduct(jth, y, prodVec);
    return R_NilValue;
END_RCPP
}
// sumPz
void sumPz(arma::fvec& Pbvec, arma::fvec& Ubvec, unsigned int mmchunksize);
RcppExport SEXP _SAIGE_sumPz(SEXP PbvecSEXP, SEXP UbvecSEXP, SEXP mmchunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type Pbvec(PbvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Ubvec(UbvecSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mmchunksize(mmchunksizeSEXP);
    sumPz(Pbvec, Ubvec, mmchunksize);
    return R_NilValue;
END_RCPP
}
// mmGetPb_MbyN
void mmGetPb_MbyN(unsigned int cthchunk, unsigned int mmchunksize, arma::fvec& bvec, arma::fvec& Pbvec, arma::fvec& kinbvec);
RcppExport SEXP _SAIGE_mmGetPb_MbyN(SEXP cthchunkSEXP, SEXP mmchunksizeSEXP, SEXP bvecSEXP, SEXP PbvecSEXP, SEXP kinbvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type cthchunk(cthchunkSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mmchunksize(mmchunksizeSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bvec(bvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Pbvec(PbvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type kinbvec(kinbvecSEXP);
    mmGetPb_MbyN(cthchunk, mmchunksize, bvec, Pbvec, kinbvec);
    return R_NilValue;
END_RCPP
}
// mmGetPb_NbyM
void mmGetPb_NbyM(unsigned int cthchunk, unsigned int mmchunksize, arma::fvec& bvec, arma::fvec& Pbvec);
RcppExport SEXP _SAIGE_mmGetPb_NbyM(SEXP cthchunkSEXP, SEXP mmchunksizeSEXP, SEXP bvecSEXP, SEXP PbvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type cthchunk(cthchunkSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type mmchunksize(mmchunksizeSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type bvec(bvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Pbvec(PbvecSEXP);
    mmGetPb_NbyM(cthchunk, mmchunksize, bvec, Pbvec);
    return R_NilValue;
END_RCPP
}
// muliplyMailman
void muliplyMailman(arma::fvec& bvec, arma::fvec& Gbvec, arma::fvec& kinbvec);
RcppExport SEXP _SAIGE_muliplyMailman(SEXP bvecSEXP, SEXP GbvecSEXP, SEXP kinbvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type bvec(bvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type Gbvec(GbvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type kinbvec(kinbvecSEXP);
    muliplyMailman(bvec, Gbvec, kinbvec);
    return R_NilValue;
END_RCPP
}
// muliplyMailman_NbyM
void muliplyMailman_NbyM(arma::fvec& bvec, arma::fvec& tGbvec);
RcppExport SEXP _SAIGE_muliplyMailman_NbyM(SEXP bvecSEXP, SEXP tGbvecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fvec& >::type bvec(bvecSEXP);
    Rcpp::traits::input_parameter< arma::fvec& >::type tGbvec(tGbvecSEXP);
    muliplyMailman_NbyM(bvec, tGbvec);
    return R_NilValue;
END_RCPP
}
// freqOverStd
void freqOverStd(arma::fcolvec& freqOverStdVec);
RcppExport SEXP _SAIGE_freqOverStd(SEXP freqOverStdVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type freqOverStdVec(freqOverStdVecSEXP);
    freqOverStd(freqOverStdVec);
    return R_NilValue;
END_RCPP
}
// getCrossprodMatAndKin_mailman
arma::fvec getCrossprodMatAndKin_mailman(arma::fcolvec& bVec);
RcppExport SEXP _SAIGE_getCrossprodMatAndKin_mailman(SEXP bVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::fcolvec& >::type bVec(bVecSEXP);
    rcpp_result_gen = Rcpp::wrap(getCrossprodMatAndKin_mailman(bVec));
    return rcpp_result_gen;
END_RCPP
}
// get_GRMdiagVec
arma::fvec get_GRMdiagVec();
RcppExport SEXP _SAIGE_get_GRMdiagVec() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(get_GRMdiagVec());
    return rcpp_result_gen;
END_RCPP
}
// setminMAFforGRM
void setminMAFforGRM(float minMAFforGRM);
RcppExport SEXP _SAIGE_setminMAFforGRM(SEXP minMAFforGRMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type minMAFforGRM(minMAFforGRMSEXP);
    setminMAFforGRM(minMAFforGRM);
    return R_NilValue;
END_RCPP
}
// set_minInfo_minMAF
void set_minInfo_minMAF(double t_minInfo, double t_minMAF);
RcppExport SEXP _SAIGE_set_minInfo_minMAF(SEXP t_minInfoSEXP, SEXP t_minMAFSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t_minInfo(t_minInfoSEXP);
    Rcpp::traits::input_parameter< double >::type t_minMAF(t_minMAFSEXP);
    set_minInfo_minMAF(t_minInfo, t_minMAF);
    return R_NilValue;
END_RCPP
}
// setIsDropMissingDosages_bgen
void setIsDropMissingDosages_bgen(bool isdropmissingdosages);
RcppExport SEXP _SAIGE_setIsDropMissingDosages_bgen(SEXP isdropmissingdosagesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isdropmissingdosages(isdropmissingdosagesSEXP);
    setIsDropMissingDosages_bgen(isdropmissingdosages);
    return R_NilValue;
END_RCPP
}
// setIsSparseDosage_bgen
void setIsSparseDosage_bgen(bool isSparseDosage);
RcppExport SEXP _SAIGE_setIsSparseDosage_bgen(SEXP isSparseDosageSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isSparseDosage(isSparseDosageSEXP);
    setIsSparseDosage_bgen(isSparseDosage);
    return R_NilValue;
END_RCPP
}
// setMarkerIndicesToInclude
void setMarkerIndicesToInclude(std::vector< int >& markerIndicesToInclude);
RcppExport SEXP _SAIGE_setMarkerIndicesToInclude(SEXP markerIndicesToIncludeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< int >& >::type markerIndicesToInclude(markerIndicesToIncludeSEXP);
    setMarkerIndicesToInclude(markerIndicesToInclude);
    return R_NilValue;
END_RCPP
}
// setgenoTest_bgenDosage
int setgenoTest_bgenDosage(const std::string t_bgenFileName, const std::string t_bgenFileIndex);
RcppExport SEXP _SAIGE_setgenoTest_bgenDosage(SEXP t_bgenFileNameSEXP, SEXP t_bgenFileIndexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type t_bgenFileName(t_bgenFileNameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type t_bgenFileIndex(t_bgenFileIndexSEXP);
    rcpp_result_gen = Rcpp::wrap(setgenoTest_bgenDosage(t_bgenFileName, t_bgenFileIndex));
    return rcpp_result_gen;
END_RCPP
}
// getOneMarker_old
Rcpp::List getOneMarker_old(int t_fileStartPos);
RcppExport SEXP _SAIGE_getOneMarker_old(SEXP t_fileStartPosSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_fileStartPos(t_fileStartPosSEXP);
    rcpp_result_gen = Rcpp::wrap(getOneMarker_old(t_fileStartPos));
    return rcpp_result_gen;
END_RCPP
}
// getOneMarker
void getOneMarker(int t_fileStartPos, std::string& SNPID, std::string& RSID, std::string& chromosome, std::string& first_allele, std::string& second_allele, uint& position, std::vector< double >& dosages, double& AC, double& AF, double& info, std::vector< int >& indexforMissing, std::vector< uint >& iIndex, bool& isFlip, bool& isBoolRead);
RcppExport SEXP _SAIGE_getOneMarker(SEXP t_fileStartPosSEXP, SEXP SNPIDSEXP, SEXP RSIDSEXP, SEXP chromosomeSEXP, SEXP first_alleleSEXP, SEXP second_alleleSEXP, SEXP positionSEXP, SEXP dosagesSEXP, SEXP ACSEXP, SEXP AFSEXP, SEXP infoSEXP, SEXP indexforMissingSEXP, SEXP iIndexSEXP, SEXP isFlipSEXP, SEXP isBoolReadSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_fileStartPos(t_fileStartPosSEXP);
    Rcpp::traits::input_parameter< std::string& >::type SNPID(SNPIDSEXP);
    Rcpp::traits::input_parameter< std::string& >::type RSID(RSIDSEXP);
    Rcpp::traits::input_parameter< std::string& >::type chromosome(chromosomeSEXP);
    Rcpp::traits::input_parameter< std::string& >::type first_allele(first_alleleSEXP);
    Rcpp::traits::input_parameter< std::string& >::type second_allele(second_alleleSEXP);
    Rcpp::traits::input_parameter< uint& >::type position(positionSEXP);
    Rcpp::traits::input_parameter< std::vector< double >& >::type dosages(dosagesSEXP);
    Rcpp::traits::input_parameter< double& >::type AC(ACSEXP);
    Rcpp::traits::input_parameter< double& >::type AF(AFSEXP);
    Rcpp::traits::input_parameter< double& >::type info(infoSEXP);
    Rcpp::traits::input_parameter< std::vector< int >& >::type indexforMissing(indexforMissingSEXP);
    Rcpp::traits::input_parameter< std::vector< uint >& >::type iIndex(iIndexSEXP);
    Rcpp::traits::input_parameter< bool& >::type isFlip(isFlipSEXP);
    Rcpp::traits::input_parameter< bool& >::type isBoolRead(isBoolReadSEXP);
    getOneMarker(t_fileStartPos, SNPID, RSID, chromosome, first_allele, second_allele, position, dosages, AC, AF, info, indexforMissing, iIndex, isFlip, isBoolRead);
    return R_NilValue;
END_RCPP
}
// getQueryStatus
bool getQueryStatus();
RcppExport SEXP _SAIGE_getQueryStatus() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getQueryStatus());
    return rcpp_result_gen;
END_RCPP
}
// setQueryStatus
bool setQueryStatus(bool isQuery);
RcppExport SEXP _SAIGE_setQueryStatus(SEXP isQuerySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isQuery(isQuerySEXP);
    rcpp_result_gen = Rcpp::wrap(setQueryStatus(isQuery));
    return rcpp_result_gen;
END_RCPP
}
// getisReadVariantBgen
bool getisReadVariantBgen();
RcppExport SEXP _SAIGE_getisReadVariantBgen() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getisReadVariantBgen());
    return rcpp_result_gen;
END_RCPP
}
// SetSampleIdx
void SetSampleIdx(Rcpp::IntegerVector sample_idx, int Ntest);
RcppExport SEXP _SAIGE_SetSampleIdx(SEXP sample_idxSEXP, SEXP NtestSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type sample_idx(sample_idxSEXP);
    Rcpp::traits::input_parameter< int >::type Ntest(NtestSEXP);
    SetSampleIdx(sample_idx, Ntest);
    return R_NilValue;
END_RCPP
}
// closetestGenoFile_bgenDosage
void closetestGenoFile_bgenDosage();
RcppExport SEXP _SAIGE_closetestGenoFile_bgenDosage() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closetestGenoFile_bgenDosage();
    return R_NilValue;
END_RCPP
}
// getSampleSizeinBgen
int getSampleSizeinBgen();
RcppExport SEXP _SAIGE_getSampleSizeinBgen() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSampleSizeinBgen());
    return rcpp_result_gen;
END_RCPP
}
// assignforScoreTest_R
void assignforScoreTest_R(bool t_LOCO, std::vector<bool>& t_LOCOVec, arma::mat& t_XVX, arma::mat& t_XXVX_inv, arma::mat& t_XV, arma::mat& t_XVX_inv_XV, arma::mat& t_X, arma::vec& t_S_a, arma::vec& t_res, arma::vec& t_mu2, arma::vec& t_mu, double t_varRatio, arma::vec& t_tauvec, std::string t_traitType, bool t_isOutputAFinCaseCtrl, bool t_isOutputHetHomCountsinCaseCtrl, bool t_isOutputNinCaseCtrl, arma::vec& t_y);
RcppExport SEXP _SAIGE_assignforScoreTest_R(SEXP t_LOCOSEXP, SEXP t_LOCOVecSEXP, SEXP t_XVXSEXP, SEXP t_XXVX_invSEXP, SEXP t_XVSEXP, SEXP t_XVX_inv_XVSEXP, SEXP t_XSEXP, SEXP t_S_aSEXP, SEXP t_resSEXP, SEXP t_mu2SEXP, SEXP t_muSEXP, SEXP t_varRatioSEXP, SEXP t_tauvecSEXP, SEXP t_traitTypeSEXP, SEXP t_isOutputAFinCaseCtrlSEXP, SEXP t_isOutputHetHomCountsinCaseCtrlSEXP, SEXP t_isOutputNinCaseCtrlSEXP, SEXP t_ySEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type t_LOCO(t_LOCOSEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type t_LOCOVec(t_LOCOVecSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XVX(t_XVXSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XXVX_inv(t_XXVX_invSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XV(t_XVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_XVX_inv_XV(t_XVX_inv_XVSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type t_X(t_XSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_S_a(t_S_aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_res(t_resSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_mu2(t_mu2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_mu(t_muSEXP);
    Rcpp::traits::input_parameter< double >::type t_varRatio(t_varRatioSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_tauvec(t_tauvecSEXP);
    Rcpp::traits::input_parameter< std::string >::type t_traitType(t_traitTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isOutputAFinCaseCtrl(t_isOutputAFinCaseCtrlSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isOutputHetHomCountsinCaseCtrl(t_isOutputHetHomCountsinCaseCtrlSEXP);
    Rcpp::traits::input_parameter< bool >::type t_isOutputNinCaseCtrl(t_isOutputNinCaseCtrlSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type t_y(t_ySEXP);
    assignforScoreTest_R(t_LOCO, t_LOCOVec, t_XVX, t_XXVX_inv, t_XV, t_XVX_inv_XV, t_X, t_S_a, t_res, t_mu2, t_mu, t_varRatio, t_tauvec, t_traitType, t_isOutputAFinCaseCtrl, t_isOutputHetHomCountsinCaseCtrl, t_isOutputNinCaseCtrl, t_y);
    return R_NilValue;
END_RCPP
}
// getScoreTest_SPA_old
Rcpp::List getScoreTest_SPA_old(int t_fileStartPos, std::string traitType);
RcppExport SEXP _SAIGE_getScoreTest_SPA_old(SEXP t_fileStartPosSEXP, SEXP traitTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_fileStartPos(t_fileStartPosSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(getScoreTest_SPA_old(t_fileStartPos, traitType));
    return rcpp_result_gen;
END_RCPP
}
// getScoreTest_SPA
bool getScoreTest_SPA(int t_fileStartPos, std::string traitType, std::string& t_chromosome, uint& t_position, std::string& t_rsid, std::string& t_allele0, std::string& t_allele1, double& t_AF, double& t_AC, double& t_info, int& t_Ntest, double& t_Beta, double& t_se, double& t_Tstat, double& t_var1, double& t_var2, std::string& t_noSPApval, double& t_SPApval, bool& t_isSPAConverge, double& t_AF_case, double& t_AF_ctrl, int& t_N_case_hom, int& t_N_case_het, int& t_N_ctrl_hom, int& t_N_ctrl_het, int& t_N_case, int& t_N_ctrl);
RcppExport SEXP _SAIGE_getScoreTest_SPA(SEXP t_fileStartPosSEXP, SEXP traitTypeSEXP, SEXP t_chromosomeSEXP, SEXP t_positionSEXP, SEXP t_rsidSEXP, SEXP t_allele0SEXP, SEXP t_allele1SEXP, SEXP t_AFSEXP, SEXP t_ACSEXP, SEXP t_infoSEXP, SEXP t_NtestSEXP, SEXP t_BetaSEXP, SEXP t_seSEXP, SEXP t_TstatSEXP, SEXP t_var1SEXP, SEXP t_var2SEXP, SEXP t_noSPApvalSEXP, SEXP t_SPApvalSEXP, SEXP t_isSPAConvergeSEXP, SEXP t_AF_caseSEXP, SEXP t_AF_ctrlSEXP, SEXP t_N_case_homSEXP, SEXP t_N_case_hetSEXP, SEXP t_N_ctrl_homSEXP, SEXP t_N_ctrl_hetSEXP, SEXP t_N_caseSEXP, SEXP t_N_ctrlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type t_fileStartPos(t_fileStartPosSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_chromosome(t_chromosomeSEXP);
    Rcpp::traits::input_parameter< uint& >::type t_position(t_positionSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_rsid(t_rsidSEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_allele0(t_allele0SEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_allele1(t_allele1SEXP);
    Rcpp::traits::input_parameter< double& >::type t_AF(t_AFSEXP);
    Rcpp::traits::input_parameter< double& >::type t_AC(t_ACSEXP);
    Rcpp::traits::input_parameter< double& >::type t_info(t_infoSEXP);
    Rcpp::traits::input_parameter< int& >::type t_Ntest(t_NtestSEXP);
    Rcpp::traits::input_parameter< double& >::type t_Beta(t_BetaSEXP);
    Rcpp::traits::input_parameter< double& >::type t_se(t_seSEXP);
    Rcpp::traits::input_parameter< double& >::type t_Tstat(t_TstatSEXP);
    Rcpp::traits::input_parameter< double& >::type t_var1(t_var1SEXP);
    Rcpp::traits::input_parameter< double& >::type t_var2(t_var2SEXP);
    Rcpp::traits::input_parameter< std::string& >::type t_noSPApval(t_noSPApvalSEXP);
    Rcpp::traits::input_parameter< double& >::type t_SPApval(t_SPApvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type t_isSPAConverge(t_isSPAConvergeSEXP);
    Rcpp::traits::input_parameter< double& >::type t_AF_case(t_AF_caseSEXP);
    Rcpp::traits::input_parameter< double& >::type t_AF_ctrl(t_AF_ctrlSEXP);
    Rcpp::traits::input_parameter< int& >::type t_N_case_hom(t_N_case_homSEXP);
    Rcpp::traits::input_parameter< int& >::type t_N_case_het(t_N_case_hetSEXP);
    Rcpp::traits::input_parameter< int& >::type t_N_ctrl_hom(t_N_ctrl_homSEXP);
    Rcpp::traits::input_parameter< int& >::type t_N_ctrl_het(t_N_ctrl_hetSEXP);
    Rcpp::traits::input_parameter< int& >::type t_N_case(t_N_caseSEXP);
    Rcpp::traits::input_parameter< int& >::type t_N_ctrl(t_N_ctrlSEXP);
    rcpp_result_gen = Rcpp::wrap(getScoreTest_SPA(t_fileStartPos, traitType, t_chromosome, t_position, t_rsid, t_allele0, t_allele1, t_AF, t_AC, t_info, t_Ntest, t_Beta, t_se, t_Tstat, t_var1, t_var2, t_noSPApval, t_SPApval, t_isSPAConverge, t_AF_case, t_AF_ctrl, t_N_case_hom, t_N_case_het, t_N_ctrl_hom, t_N_ctrl_het, t_N_case, t_N_ctrl));
    return rcpp_result_gen;
END_RCPP
}
// getScoreTest_SPA_multi
Rcpp::DataFrame getScoreTest_SPA_multi(int mth_start, int m_to_test, std::string traitType);
RcppExport SEXP _SAIGE_getScoreTest_SPA_multi(SEXP mth_startSEXP, SEXP m_to_testSEXP, SEXP traitTypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type mth_start(mth_startSEXP);
    Rcpp::traits::input_parameter< int >::type m_to_test(m_to_testSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    rcpp_result_gen = Rcpp::wrap(getScoreTest_SPA_multi(mth_start, m_to_test, traitType));
    return rcpp_result_gen;
END_RCPP
}
// getScoreTest_SPA_multi_new
void getScoreTest_SPA_multi_new(int mth_start, int m_to_test, std::string traitType, std::vector<std::string>& chromVec, std::vector<uint>& posVec, std::vector<std::string>& rsIDVec, std::vector<std::string>& A1Vec, std::vector<std::string>& A2Vec, std::vector<double>& infoVec, std::vector<double>& ACVec, std::vector<double>& altFreqVec, std::vector<double>& BetaVec, std::vector<double>& seBetaVec, std::vector<std::string>& pvalVec, std::vector<double>& TstatVec, std::vector<double>& var1Vec, std::vector<double>& var2Vec, std::vector<int>& NVec, std::vector<double>& SPApvalVec, std::vector<bool>& SPAConverge, std::vector<double>& AFinCaseVec, std::vector<double>& AFinCtrlVec, std::vector<double>& N_case_homVec, std::vector<double>& N_ctrl_hetVec, std::vector<double>& N_case_hetVec, std::vector<double>& N_ctrl_homVec);
RcppExport SEXP _SAIGE_getScoreTest_SPA_multi_new(SEXP mth_startSEXP, SEXP m_to_testSEXP, SEXP traitTypeSEXP, SEXP chromVecSEXP, SEXP posVecSEXP, SEXP rsIDVecSEXP, SEXP A1VecSEXP, SEXP A2VecSEXP, SEXP infoVecSEXP, SEXP ACVecSEXP, SEXP altFreqVecSEXP, SEXP BetaVecSEXP, SEXP seBetaVecSEXP, SEXP pvalVecSEXP, SEXP TstatVecSEXP, SEXP var1VecSEXP, SEXP var2VecSEXP, SEXP NVecSEXP, SEXP SPApvalVecSEXP, SEXP SPAConvergeSEXP, SEXP AFinCaseVecSEXP, SEXP AFinCtrlVecSEXP, SEXP N_case_homVecSEXP, SEXP N_ctrl_hetVecSEXP, SEXP N_case_hetVecSEXP, SEXP N_ctrl_homVecSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type mth_start(mth_startSEXP);
    Rcpp::traits::input_parameter< int >::type m_to_test(m_to_testSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type chromVec(chromVecSEXP);
    Rcpp::traits::input_parameter< std::vector<uint>& >::type posVec(posVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type rsIDVec(rsIDVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type A1Vec(A1VecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type A2Vec(A2VecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type infoVec(infoVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type ACVec(ACVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type altFreqVec(altFreqVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type BetaVec(BetaVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type seBetaVec(seBetaVecSEXP);
    Rcpp::traits::input_parameter< std::vector<std::string>& >::type pvalVec(pvalVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type TstatVec(TstatVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type var1Vec(var1VecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type var2Vec(var2VecSEXP);
    Rcpp::traits::input_parameter< std::vector<int>& >::type NVec(NVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type SPApvalVec(SPApvalVecSEXP);
    Rcpp::traits::input_parameter< std::vector<bool>& >::type SPAConverge(SPAConvergeSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type AFinCaseVec(AFinCaseVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type AFinCtrlVec(AFinCtrlVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type N_case_homVec(N_case_homVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type N_ctrl_hetVec(N_ctrl_hetVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type N_case_hetVec(N_case_hetVecSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type N_ctrl_homVec(N_ctrl_homVecSEXP);
    getScoreTest_SPA_multi_new(mth_start, m_to_test, traitType, chromVec, posVec, rsIDVec, A1Vec, A2Vec, infoVec, ACVec, altFreqVec, BetaVec, seBetaVec, pvalVec, TstatVec, var1Vec, var2Vec, NVec, SPApvalVec, SPAConverge, AFinCaseVec, AFinCtrlVec, N_case_homVec, N_ctrl_hetVec, N_case_hetVec, N_ctrl_homVec);
    return R_NilValue;
END_RCPP
}
// SetSampleIdx_vcfDosage
void SetSampleIdx_vcfDosage(Rcpp::IntegerVector sample_idx, int Ntest);
RcppExport SEXP _SAIGE_SetSampleIdx_vcfDosage(SEXP sample_idxSEXP, SEXP NtestSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type sample_idx(sample_idxSEXP);
    Rcpp::traits::input_parameter< int >::type Ntest(NtestSEXP);
    SetSampleIdx_vcfDosage(sample_idx, Ntest);
    return R_NilValue;
END_RCPP
}
// setTestField
void setTestField(std::string testFieldInput);
RcppExport SEXP _SAIGE_setTestField(SEXP testFieldInputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type testFieldInput(testFieldInputSEXP);
    setTestField(testFieldInput);
    return R_NilValue;
END_RCPP
}
// setIsDropMissingDosages_vcf
void setIsDropMissingDosages_vcf(bool isdropmissingdosages);
RcppExport SEXP _SAIGE_setIsDropMissingDosages_vcf(SEXP isdropmissingdosagesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< bool >::type isdropmissingdosages(isdropmissingdosagesSEXP);
    setIsDropMissingDosages_vcf(isdropmissingdosages);
    return R_NilValue;
END_RCPP
}
// setgenoTest_vcfDosage
bool setgenoTest_vcfDosage(const std::string& vcfFileName, const std::string& vcfFileIndex, const std::string& vcfField, const std::string& ids_to_exclude_vcf, const std::string& ids_to_include_vcf, const std::string& chromNam, int32_t start, int32_t end);
RcppExport SEXP _SAIGE_setgenoTest_vcfDosage(SEXP vcfFileNameSEXP, SEXP vcfFileIndexSEXP, SEXP vcfFieldSEXP, SEXP ids_to_exclude_vcfSEXP, SEXP ids_to_include_vcfSEXP, SEXP chromNamSEXP, SEXP startSEXP, SEXP endSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type vcfFileName(vcfFileNameSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type vcfFileIndex(vcfFileIndexSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type vcfField(vcfFieldSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type ids_to_exclude_vcf(ids_to_exclude_vcfSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type ids_to_include_vcf(ids_to_include_vcfSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type chromNam(chromNamSEXP);
    Rcpp::traits::input_parameter< int32_t >::type start(startSEXP);
    Rcpp::traits::input_parameter< int32_t >::type end(endSEXP);
    rcpp_result_gen = Rcpp::wrap(setgenoTest_vcfDosage(vcfFileName, vcfFileIndex, vcfField, ids_to_exclude_vcf, ids_to_include_vcf, chromNam, start, end));
    return rcpp_result_gen;
END_RCPP
}
// getNumofSamples
int getNumofSamples();
RcppExport SEXP _SAIGE_getNumofSamples() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getNumofSamples());
    return rcpp_result_gen;
END_RCPP
}
// getSampleIDlist
std::vector< std::string > getSampleIDlist();
RcppExport SEXP _SAIGE_getSampleIDlist() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSampleIDlist());
    return rcpp_result_gen;
END_RCPP
}
// getGenoOfnthVar_vcfDosage_pre
bool getGenoOfnthVar_vcfDosage_pre();
RcppExport SEXP _SAIGE_getGenoOfnthVar_vcfDosage_pre() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getGenoOfnthVar_vcfDosage_pre());
    return rcpp_result_gen;
END_RCPP
}
// getGenoOfnthVar_vcfDosage
Rcpp::List getGenoOfnthVar_vcfDosage(int mth);
RcppExport SEXP _SAIGE_getGenoOfnthVar_vcfDosage(SEXP mthSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type mth(mthSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenoOfnthVar_vcfDosage(mth));
    return rcpp_result_gen;
END_RCPP
}
// closetestGenoFile_vcfDosage
void closetestGenoFile_vcfDosage();
RcppExport SEXP _SAIGE_closetestGenoFile_vcfDosage() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    closetestGenoFile_vcfDosage();
    return R_NilValue;
END_RCPP
}
// getSampleSizeinVCF
int getSampleSizeinVCF();
RcppExport SEXP _SAIGE_getSampleSizeinVCF() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getSampleSizeinVCF());
    return rcpp_result_gen;
END_RCPP
}
// SPA
void SPA(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp, std::string traitType, double& pval, bool& isSPAConverge);
RcppExport SEXP _SAIGE_SPA(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP, SEXP traitTypeSEXP, SEXP pvalSEXP, SEXP isSPAConvergeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type isSPAConverge(isSPAConvergeSEXP);
    SPA(mu, g, q, qinv, pval_noadj, tol, logp, traitType, pval, isSPAConverge);
    return R_NilValue;
END_RCPP
}
// SPA_fast
void SPA_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, std::string traitType, double& pval, bool& isSPAConverge);
RcppExport SEXP _SAIGE_SPA_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP traitTypeSEXP, SEXP pvalSEXP, SEXP isSPAConvergeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< std::string >::type traitType(traitTypeSEXP);
    Rcpp::traits::input_parameter< double& >::type pval(pvalSEXP);
    Rcpp::traits::input_parameter< bool& >::type isSPAConverge(isSPAConvergeSEXP);
    SPA_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, traitType, pval, isSPAConverge);
    return R_NilValue;
END_RCPP
}
// Korg_Binom
double Korg_Binom(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_Korg_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_Binom(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_Binom
double K1_adj_Binom(double t1, arma::vec& mu, arma::vec& g, double q);
RcppExport SEXP _SAIGE_K1_adj_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_Binom(t1, mu, g, q));
    return rcpp_result_gen;
END_RCPP
}
// K2_Binom
double K2_Binom(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_K2_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Binom(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_Binom
Rcpp::List getroot_K1_Binom(double init, arma::vec& mu, arma::vec& g, double q, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_Binom(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_Binom(init, mu, g, q, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_Binom
Rcpp::List Get_Saddle_Prob_Binom(double zeta, arma::vec& mu, arma::vec& g, double q, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_Binom(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_Binom(zeta, mu, g, q, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_binary
Rcpp::List SPA_binary(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp);
RcppExport SEXP _SAIGE_SPA_binary(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_binary(mu, g, q, qinv, pval_noadj, tol, logp));
    return rcpp_result_gen;
END_RCPP
}
// Korg_fast_Binom
double Korg_fast_Binom(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_Korg_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_fast_Binom(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_fast_Binom
double K1_adj_fast_Binom(double t1, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K1_adj_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_fast_Binom(t1, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K2_fast_Binom
double K2_fast_Binom(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K2_fast_Binom(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_fast_Binom(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_fast_Binom
Rcpp::List getroot_K1_fast_Binom(double init, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_fast_Binom(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_fast_Binom(init, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_fast_Binom
Rcpp::List Get_Saddle_Prob_fast_Binom(double zeta, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_fast_Binom(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_fast_Binom(zeta, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_binary_fast
Rcpp::List SPA_binary_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol);
RcppExport SEXP _SAIGE_SPA_binary_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_binary_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// Korg_Poi
double Korg_Poi(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_Korg_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_Poi(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_Poi
double K1_adj_Poi(double t1, arma::vec& mu, arma::vec& g, double q);
RcppExport SEXP _SAIGE_K1_adj_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_Poi(t1, mu, g, q));
    return rcpp_result_gen;
END_RCPP
}
// K2_Poi
double K2_Poi(double t1, arma::vec& mu, arma::vec& g);
RcppExport SEXP _SAIGE_K2_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_Poi(t1, mu, g));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_Poi
Rcpp::List getroot_K1_Poi(double init, arma::vec& mu, arma::vec& g, double q, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_Poi(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_Poi(init, mu, g, q, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_Poi
Rcpp::List Get_Saddle_Prob_Poi(double zeta, arma::vec& mu, arma::vec& g, double q, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_Poi(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_Poi(zeta, mu, g, q, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_survival
Rcpp::List SPA_survival(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, double tol, bool logp);
RcppExport SEXP _SAIGE_SPA_survival(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP tolSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_survival(mu, g, q, qinv, pval_noadj, tol, logp));
    return rcpp_result_gen;
END_RCPP
}
// Korg_fast_Poi
double Korg_fast_Poi(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_Korg_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Korg_fast_Poi(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K1_adj_fast_Poi
double K1_adj_fast_Poi(double t1, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K1_adj_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K1_adj_fast_Poi(t1, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// K2_fast_Poi
double K2_fast_Poi(double t1, arma::vec& mu, arma::vec& g, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma);
RcppExport SEXP _SAIGE_K2_fast_Poi(SEXP t1SEXP, SEXP muSEXP, SEXP gSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t1(t1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(K2_fast_Poi(t1, mu, g, gNA, gNB, muNA, muNB, NAmu, NAsigma));
    return rcpp_result_gen;
END_RCPP
}
// getroot_K1_fast_Poi
Rcpp::List getroot_K1_fast_Poi(double init, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol, int maxiter);
RcppExport SEXP _SAIGE_getroot_K1_fast_Poi(SEXP initSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type init(initSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(getroot_K1_fast_Poi(init, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// Get_Saddle_Prob_fast_Poi
Rcpp::List Get_Saddle_Prob_fast_Poi(double zeta, arma::vec& mu, arma::vec& g, double q, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, bool logp);
RcppExport SEXP _SAIGE_Get_Saddle_Prob_fast_Poi(SEXP zetaSEXP, SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP logpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type zeta(zetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    rcpp_result_gen = Rcpp::wrap(Get_Saddle_Prob_fast_Poi(zeta, mu, g, q, gNA, gNB, muNA, muNB, NAmu, NAsigma, logp));
    return rcpp_result_gen;
END_RCPP
}
// SPA_survival_fast
Rcpp::List SPA_survival_fast(arma::vec& mu, arma::vec& g, double q, double qinv, double pval_noadj, bool logp, arma::vec& gNA, arma::vec& gNB, arma::vec& muNA, arma::vec& muNB, double NAmu, double NAsigma, double tol);
RcppExport SEXP _SAIGE_SPA_survival_fast(SEXP muSEXP, SEXP gSEXP, SEXP qSEXP, SEXP qinvSEXP, SEXP pval_noadjSEXP, SEXP logpSEXP, SEXP gNASEXP, SEXP gNBSEXP, SEXP muNASEXP, SEXP muNBSEXP, SEXP NAmuSEXP, SEXP NAsigmaSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type g(gSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type qinv(qinvSEXP);
    Rcpp::traits::input_parameter< double >::type pval_noadj(pval_noadjSEXP);
    Rcpp::traits::input_parameter< bool >::type logp(logpSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNA(gNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type gNB(gNBSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNA(muNASEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type muNB(muNBSEXP);
    Rcpp::traits::input_parameter< double >::type NAmu(NAmuSEXP);
    Rcpp::traits::input_parameter< double >::type NAsigma(NAsigmaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(SPA_survival_fast(mu, g, q, qinv, pval_noadj, logp, gNA, gNB, muNA, muNB, NAmu, NAsigma, tol));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd>& A, Eigen::Map<Eigen::MatrixXd>& B);
RcppExport SEXP _SAIGE_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd>& >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd>& >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// mult_sp_sp_to_sp
arma::sp_mat mult_sp_sp_to_sp(const arma::sp_mat& a, const arma::sp_mat& b);
RcppExport SEXP _SAIGE_mult_sp_sp_to_sp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_sp_sp_to_sp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mult_sp_den_to_sp
arma::sp_mat mult_sp_den_to_sp(const arma::sp_mat& a, const arma::mat& b);
RcppExport SEXP _SAIGE_mult_sp_den_to_sp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_sp_den_to_sp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mult_den_sp_to_sp
arma::sp_mat mult_den_sp_to_sp(const arma::mat& a, const arma::sp_mat& b);
RcppExport SEXP _SAIGE_mult_den_sp_to_sp(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mult_den_sp_to_sp(a, b));
    return rcpp_result_gen;
END_RCPP
}
// gen_sp
arma::sp_mat gen_sp(const arma::sp_mat& a);
RcppExport SEXP _SAIGE_gen_sp(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sp(a));
    return rcpp_result_gen;
END_RCPP
}
// sum_arma1
double sum_arma1(arma::vec& X);
RcppExport SEXP _SAIGE_sum_arma1(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sum_arma1(X));
    return rcpp_result_gen;
END_RCPP
}
// add_logp
double add_logp(double p1, double p2);
RcppExport SEXP _SAIGE_add_logp(SEXP p1SEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< double >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(add_logp(p1, p2));
    return rcpp_result_gen;
END_RCPP
}
// arma_sub_cond
arma::vec arma_sub_cond(arma::vec x, arma::uvec iu);
RcppExport SEXP _SAIGE_arma_sub_cond(SEXP xSEXP, SEXP iuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type iu(iuSEXP);
    rcpp_result_gen = Rcpp::wrap(arma_sub_cond(x, iu));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SAIGE_SetSampleIdx_forGenetest_vcfDosage", (DL_FUNC) &_SAIGE_SetSampleIdx_forGenetest_vcfDosage, 2},
    {"_SAIGE_setMAFcutoffs", (DL_FUNC) &_SAIGE_setMAFcutoffs, 2},
    {"_SAIGE_setvcfDosageMatrix", (DL_FUNC) &_SAIGE_setvcfDosageMatrix, 3},
    {"_SAIGE_getNumofSamples_Matrix", (DL_FUNC) &_SAIGE_getNumofSamples_Matrix, 0},
    {"_SAIGE_getSampleIDlist_vcfMatrix", (DL_FUNC) &_SAIGE_getSampleIDlist_vcfMatrix, 0},
    {"_SAIGE_getGenoOfGene_vcf", (DL_FUNC) &_SAIGE_getGenoOfGene_vcf, 2},
    {"_SAIGE_closevcfDosageFile", (DL_FUNC) &_SAIGE_closevcfDosageFile, 0},
    {"_SAIGE_closeGenoFile_plink", (DL_FUNC) &_SAIGE_closeGenoFile_plink, 0},
    {"_SAIGE_gettotalMarker", (DL_FUNC) &_SAIGE_gettotalMarker, 0},
    {"_SAIGE_getAlleleFreqVec", (DL_FUNC) &_SAIGE_getAlleleFreqVec, 0},
    {"_SAIGE_getMACVec", (DL_FUNC) &_SAIGE_getMACVec, 0},
    {"_SAIGE_getSubMarkerIndex", (DL_FUNC) &_SAIGE_getSubMarkerIndex, 0},
    {"_SAIGE_getSubMarkerNum", (DL_FUNC) &_SAIGE_getSubMarkerNum, 0},
    {"_SAIGE_getNnomissingOut", (DL_FUNC) &_SAIGE_getNnomissingOut, 0},
    {"_SAIGE_getMsub_MAFge_minMAFtoConstructGRM", (DL_FUNC) &_SAIGE_getMsub_MAFge_minMAFtoConstructGRM, 0},
    {"_SAIGE_Get_MultiMarkersBySample_StdGeno_Mat", (DL_FUNC) &_SAIGE_Get_MultiMarkersBySample_StdGeno_Mat, 0},
    {"_SAIGE_Get_MultiMarkersBySample_StdGeno", (DL_FUNC) &_SAIGE_Get_MultiMarkersBySample_StdGeno, 2},
    {"_SAIGE_parallelCrossProd", (DL_FUNC) &_SAIGE_parallelCrossProd, 1},
    {"_SAIGE_innerProductFun", (DL_FUNC) &_SAIGE_innerProductFun, 2},
    {"_SAIGE_parallelCrossProd_LOCO", (DL_FUNC) &_SAIGE_parallelCrossProd_LOCO, 1},
    {"_SAIGE_setupSparseGRM", (DL_FUNC) &_SAIGE_setupSparseGRM, 3},
    {"_SAIGE_getCrossprodMatAndKin", (DL_FUNC) &_SAIGE_getCrossprodMatAndKin, 1},
    {"_SAIGE_getCrossprodMatAndKin_LOCO", (DL_FUNC) &_SAIGE_getCrossprodMatAndKin_LOCO, 1},
    {"_SAIGE_printComb", (DL_FUNC) &_SAIGE_printComb, 1},
    {"_SAIGE_findIndiceRelatedSample", (DL_FUNC) &_SAIGE_findIndiceRelatedSample, 0},
    {"_SAIGE_parallelcalsparseGRM", (DL_FUNC) &_SAIGE_parallelcalsparseGRM, 1},
    {"_SAIGE_parallelsumTwoVec", (DL_FUNC) &_SAIGE_parallelsumTwoVec, 1},
    {"_SAIGE_setgeno", (DL_FUNC) &_SAIGE_setgeno, 4},
    {"_SAIGE_Get_OneSNP_Geno", (DL_FUNC) &_SAIGE_Get_OneSNP_Geno, 1},
    {"_SAIGE_Get_OneSNP_Geno_forVarianceRatio", (DL_FUNC) &_SAIGE_Get_OneSNP_Geno_forVarianceRatio, 1},
    {"_SAIGE_Get_OneSNP_StdGeno", (DL_FUNC) &_SAIGE_Get_OneSNP_StdGeno, 1},
    {"_SAIGE_getDiagOfSigma", (DL_FUNC) &_SAIGE_getDiagOfSigma, 2},
    {"_SAIGE_getDiagOfSigma_LOCO", (DL_FUNC) &_SAIGE_getDiagOfSigma_LOCO, 2},
    {"_SAIGE_getCrossprod", (DL_FUNC) &_SAIGE_getCrossprod, 3},
    {"_SAIGE_getCrossprod_LOCO", (DL_FUNC) &_SAIGE_getCrossprod_LOCO, 3},
    {"_SAIGE_gen_sp_GRM", (DL_FUNC) &_SAIGE_gen_sp_GRM, 0},
    {"_SAIGE_gen_sp_Sigma", (DL_FUNC) &_SAIGE_gen_sp_Sigma, 2},
    {"_SAIGE_gen_spsolve_v3", (DL_FUNC) &_SAIGE_gen_spsolve_v3, 1},
    {"_SAIGE_gen_spsolve_v4", (DL_FUNC) &_SAIGE_gen_spsolve_v4, 3},
    {"_SAIGE_setisUsePrecondM", (DL_FUNC) &_SAIGE_setisUsePrecondM, 1},
    {"_SAIGE_setisUseSparseSigmaforInitTau", (DL_FUNC) &_SAIGE_setisUseSparseSigmaforInitTau, 1},
    {"_SAIGE_setisUseSparseSigmaforNullModelFitting", (DL_FUNC) &_SAIGE_setisUseSparseSigmaforNullModelFitting, 1},
    {"_SAIGE_getPCG1ofSigmaAndVector", (DL_FUNC) &_SAIGE_getPCG1ofSigmaAndVector, 5},
    {"_SAIGE_getPCG1ofSigmaAndVector_old", (DL_FUNC) &_SAIGE_getPCG1ofSigmaAndVector_old, 5},
    {"_SAIGE_getPCG1ofSigmaAndVector_LOCO", (DL_FUNC) &_SAIGE_getPCG1ofSigmaAndVector_LOCO, 5},
    {"_SAIGE_set_seed", (DL_FUNC) &_SAIGE_set_seed, 1},
    {"_SAIGE_nb", (DL_FUNC) &_SAIGE_nb, 1},
    {"_SAIGE_setStartEndIndex", (DL_FUNC) &_SAIGE_setStartEndIndex, 2},
    {"_SAIGE_calCV", (DL_FUNC) &_SAIGE_calCV, 1},
    {"_SAIGE_GetTrace", (DL_FUNC) &_SAIGE_GetTrace, 9},
    {"_SAIGE_getCoefficients", (DL_FUNC) &_SAIGE_getCoefficients, 6},
    {"_SAIGE_getCoefficients_LOCO", (DL_FUNC) &_SAIGE_getCoefficients_LOCO, 6},
    {"_SAIGE_getCoefficients_q_LOCO", (DL_FUNC) &_SAIGE_getCoefficients_q_LOCO, 6},
    {"_SAIGE_getAIScore", (DL_FUNC) &_SAIGE_getAIScore, 11},
    {"_SAIGE_fitglmmaiRPCG", (DL_FUNC) &_SAIGE_fitglmmaiRPCG, 12},
    {"_SAIGE_getSigma_X", (DL_FUNC) &_SAIGE_getSigma_X, 5},
    {"_SAIGE_getSigma_X_LOCO", (DL_FUNC) &_SAIGE_getSigma_X_LOCO, 5},
    {"_SAIGE_getSigma_G", (DL_FUNC) &_SAIGE_getSigma_G, 5},
    {"_SAIGE_getSigma_G_LOCO", (DL_FUNC) &_SAIGE_getSigma_G_LOCO, 5},
    {"_SAIGE_GetTrace_q", (DL_FUNC) &_SAIGE_GetTrace_q, 9},
    {"_SAIGE_getAIScore_q", (DL_FUNC) &_SAIGE_getAIScore_q, 11},
    {"_SAIGE_getAIScore_q_LOCO", (DL_FUNC) &_SAIGE_getAIScore_q_LOCO, 8},
    {"_SAIGE_fitglmmaiRPCG_q_LOCO", (DL_FUNC) &_SAIGE_fitglmmaiRPCG_q_LOCO, 9},
    {"_SAIGE_fitglmmaiRPCG_q", (DL_FUNC) &_SAIGE_fitglmmaiRPCG_q, 12},
    {"_SAIGE_parallelCrossProd_usingSubMarker", (DL_FUNC) &_SAIGE_parallelCrossProd_usingSubMarker, 1},
    {"_SAIGE_getCrossprodMatAndKin_usingSubMarker", (DL_FUNC) &_SAIGE_getCrossprodMatAndKin_usingSubMarker, 1},
    {"_SAIGE_parallelInnerProduct", (DL_FUNC) &_SAIGE_parallelInnerProduct, 2},
    {"_SAIGE_calGRMValueforSamplePair", (DL_FUNC) &_SAIGE_calGRMValueforSamplePair, 1},
    {"_SAIGE_createSparseKin", (DL_FUNC) &_SAIGE_createSparseKin, 4},
    {"_SAIGE_getColfromStdGenoMultiMarkersMat", (DL_FUNC) &_SAIGE_getColfromStdGenoMultiMarkersMat, 1},
    {"_SAIGE_getNColStdGenoMultiMarkersMat", (DL_FUNC) &_SAIGE_getNColStdGenoMultiMarkersMat, 0},
    {"_SAIGE_getNRowStdGenoMultiMarkersMat", (DL_FUNC) &_SAIGE_getNRowStdGenoMultiMarkersMat, 0},
    {"_SAIGE_setSubMarkerIndex", (DL_FUNC) &_SAIGE_setSubMarkerIndex, 1},
    {"_SAIGE_setRelatednessCutoff", (DL_FUNC) &_SAIGE_setRelatednessCutoff, 1},
    {"_SAIGE_innerProduct", (DL_FUNC) &_SAIGE_innerProduct, 2},
    {"_SAIGE_refineKin", (DL_FUNC) &_SAIGE_refineKin, 1},
    {"_SAIGE_shortenList", (DL_FUNC) &_SAIGE_shortenList, 5},
    {"_SAIGE_testTime", (DL_FUNC) &_SAIGE_testTime, 2},
    {"_SAIGE_gen_sp_v2", (DL_FUNC) &_SAIGE_gen_sp_v2, 1},
    {"_SAIGE_gen_spsolve_v2", (DL_FUNC) &_SAIGE_gen_spsolve_v2, 1},
    {"_SAIGE_gen_spsolve_inR", (DL_FUNC) &_SAIGE_gen_spsolve_inR, 2},
    {"_SAIGE_get_DiagofKin", (DL_FUNC) &_SAIGE_get_DiagofKin, 0},
    {"_SAIGE_getstdgenoVectorScalorProduct", (DL_FUNC) &_SAIGE_getstdgenoVectorScalorProduct, 3},
    {"_SAIGE_sumPz", (DL_FUNC) &_SAIGE_sumPz, 3},
    {"_SAIGE_mmGetPb_MbyN", (DL_FUNC) &_SAIGE_mmGetPb_MbyN, 5},
    {"_SAIGE_mmGetPb_NbyM", (DL_FUNC) &_SAIGE_mmGetPb_NbyM, 4},
    {"_SAIGE_muliplyMailman", (DL_FUNC) &_SAIGE_muliplyMailman, 3},
    {"_SAIGE_muliplyMailman_NbyM", (DL_FUNC) &_SAIGE_muliplyMailman_NbyM, 2},
    {"_SAIGE_freqOverStd", (DL_FUNC) &_SAIGE_freqOverStd, 1},
    {"_SAIGE_getCrossprodMatAndKin_mailman", (DL_FUNC) &_SAIGE_getCrossprodMatAndKin_mailman, 1},
    {"_SAIGE_get_GRMdiagVec", (DL_FUNC) &_SAIGE_get_GRMdiagVec, 0},
    {"_SAIGE_setminMAFforGRM", (DL_FUNC) &_SAIGE_setminMAFforGRM, 1},
    {"_SAIGE_set_minInfo_minMAF", (DL_FUNC) &_SAIGE_set_minInfo_minMAF, 2},
    {"_SAIGE_setIsDropMissingDosages_bgen", (DL_FUNC) &_SAIGE_setIsDropMissingDosages_bgen, 1},
    {"_SAIGE_setIsSparseDosage_bgen", (DL_FUNC) &_SAIGE_setIsSparseDosage_bgen, 1},
    {"_SAIGE_setMarkerIndicesToInclude", (DL_FUNC) &_SAIGE_setMarkerIndicesToInclude, 1},
    {"_SAIGE_setgenoTest_bgenDosage", (DL_FUNC) &_SAIGE_setgenoTest_bgenDosage, 2},
    {"_SAIGE_getOneMarker_old", (DL_FUNC) &_SAIGE_getOneMarker_old, 1},
    {"_SAIGE_getOneMarker", (DL_FUNC) &_SAIGE_getOneMarker, 15},
    {"_SAIGE_getQueryStatus", (DL_FUNC) &_SAIGE_getQueryStatus, 0},
    {"_SAIGE_setQueryStatus", (DL_FUNC) &_SAIGE_setQueryStatus, 1},
    {"_SAIGE_getisReadVariantBgen", (DL_FUNC) &_SAIGE_getisReadVariantBgen, 0},
    {"_SAIGE_SetSampleIdx", (DL_FUNC) &_SAIGE_SetSampleIdx, 2},
    {"_SAIGE_closetestGenoFile_bgenDosage", (DL_FUNC) &_SAIGE_closetestGenoFile_bgenDosage, 0},
    {"_SAIGE_getSampleSizeinBgen", (DL_FUNC) &_SAIGE_getSampleSizeinBgen, 0},
    {"_SAIGE_assignforScoreTest_R", (DL_FUNC) &_SAIGE_assignforScoreTest_R, 18},
    {"_SAIGE_getScoreTest_SPA_old", (DL_FUNC) &_SAIGE_getScoreTest_SPA_old, 2},
    {"_SAIGE_getScoreTest_SPA", (DL_FUNC) &_SAIGE_getScoreTest_SPA, 27},
    {"_SAIGE_getScoreTest_SPA_multi", (DL_FUNC) &_SAIGE_getScoreTest_SPA_multi, 3},
    {"_SAIGE_getScoreTest_SPA_multi_new", (DL_FUNC) &_SAIGE_getScoreTest_SPA_multi_new, 26},
    {"_SAIGE_SetSampleIdx_vcfDosage", (DL_FUNC) &_SAIGE_SetSampleIdx_vcfDosage, 2},
    {"_SAIGE_setTestField", (DL_FUNC) &_SAIGE_setTestField, 1},
    {"_SAIGE_setIsDropMissingDosages_vcf", (DL_FUNC) &_SAIGE_setIsDropMissingDosages_vcf, 1},
    {"_SAIGE_setgenoTest_vcfDosage", (DL_FUNC) &_SAIGE_setgenoTest_vcfDosage, 8},
    {"_SAIGE_getNumofSamples", (DL_FUNC) &_SAIGE_getNumofSamples, 0},
    {"_SAIGE_getSampleIDlist", (DL_FUNC) &_SAIGE_getSampleIDlist, 0},
    {"_SAIGE_getGenoOfnthVar_vcfDosage_pre", (DL_FUNC) &_SAIGE_getGenoOfnthVar_vcfDosage_pre, 0},
    {"_SAIGE_getGenoOfnthVar_vcfDosage", (DL_FUNC) &_SAIGE_getGenoOfnthVar_vcfDosage, 1},
    {"_SAIGE_closetestGenoFile_vcfDosage", (DL_FUNC) &_SAIGE_closetestGenoFile_vcfDosage, 0},
    {"_SAIGE_getSampleSizeinVCF", (DL_FUNC) &_SAIGE_getSampleSizeinVCF, 0},
    {"_SAIGE_SPA", (DL_FUNC) &_SAIGE_SPA, 10},
    {"_SAIGE_SPA_fast", (DL_FUNC) &_SAIGE_SPA_fast, 16},
    {"_SAIGE_Korg_Binom", (DL_FUNC) &_SAIGE_Korg_Binom, 3},
    {"_SAIGE_K1_adj_Binom", (DL_FUNC) &_SAIGE_K1_adj_Binom, 4},
    {"_SAIGE_K2_Binom", (DL_FUNC) &_SAIGE_K2_Binom, 3},
    {"_SAIGE_getroot_K1_Binom", (DL_FUNC) &_SAIGE_getroot_K1_Binom, 6},
    {"_SAIGE_Get_Saddle_Prob_Binom", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_Binom, 5},
    {"_SAIGE_SPA_binary", (DL_FUNC) &_SAIGE_SPA_binary, 7},
    {"_SAIGE_Korg_fast_Binom", (DL_FUNC) &_SAIGE_Korg_fast_Binom, 9},
    {"_SAIGE_K1_adj_fast_Binom", (DL_FUNC) &_SAIGE_K1_adj_fast_Binom, 10},
    {"_SAIGE_K2_fast_Binom", (DL_FUNC) &_SAIGE_K2_fast_Binom, 9},
    {"_SAIGE_getroot_K1_fast_Binom", (DL_FUNC) &_SAIGE_getroot_K1_fast_Binom, 12},
    {"_SAIGE_Get_Saddle_Prob_fast_Binom", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_fast_Binom, 11},
    {"_SAIGE_SPA_binary_fast", (DL_FUNC) &_SAIGE_SPA_binary_fast, 13},
    {"_SAIGE_Korg_Poi", (DL_FUNC) &_SAIGE_Korg_Poi, 3},
    {"_SAIGE_K1_adj_Poi", (DL_FUNC) &_SAIGE_K1_adj_Poi, 4},
    {"_SAIGE_K2_Poi", (DL_FUNC) &_SAIGE_K2_Poi, 3},
    {"_SAIGE_getroot_K1_Poi", (DL_FUNC) &_SAIGE_getroot_K1_Poi, 6},
    {"_SAIGE_Get_Saddle_Prob_Poi", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_Poi, 5},
    {"_SAIGE_SPA_survival", (DL_FUNC) &_SAIGE_SPA_survival, 7},
    {"_SAIGE_Korg_fast_Poi", (DL_FUNC) &_SAIGE_Korg_fast_Poi, 9},
    {"_SAIGE_K1_adj_fast_Poi", (DL_FUNC) &_SAIGE_K1_adj_fast_Poi, 10},
    {"_SAIGE_K2_fast_Poi", (DL_FUNC) &_SAIGE_K2_fast_Poi, 9},
    {"_SAIGE_getroot_K1_fast_Poi", (DL_FUNC) &_SAIGE_getroot_K1_fast_Poi, 12},
    {"_SAIGE_Get_Saddle_Prob_fast_Poi", (DL_FUNC) &_SAIGE_Get_Saddle_Prob_fast_Poi, 11},
    {"_SAIGE_SPA_survival_fast", (DL_FUNC) &_SAIGE_SPA_survival_fast, 13},
    {"_SAIGE_eigenMapMatMult", (DL_FUNC) &_SAIGE_eigenMapMatMult, 2},
    {"_SAIGE_mult_sp_sp_to_sp", (DL_FUNC) &_SAIGE_mult_sp_sp_to_sp, 2},
    {"_SAIGE_mult_sp_den_to_sp", (DL_FUNC) &_SAIGE_mult_sp_den_to_sp, 2},
    {"_SAIGE_mult_den_sp_to_sp", (DL_FUNC) &_SAIGE_mult_den_sp_to_sp, 2},
    {"_SAIGE_gen_sp", (DL_FUNC) &_SAIGE_gen_sp, 1},
    {"_SAIGE_sum_arma1", (DL_FUNC) &_SAIGE_sum_arma1, 1},
    {"_SAIGE_add_logp", (DL_FUNC) &_SAIGE_add_logp, 2},
    {"_SAIGE_arma_sub_cond", (DL_FUNC) &_SAIGE_arma_sub_cond, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SAIGE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
